#pragma once
#pragma comment (lib, "ntdll")

#include <Windows.h>
#include <stdio.h>

#define STATUS_SUCCESS ((NTSTATUS)0x00000000L)
#define okay(msg, ...) printf("(*) " msg "\n", ##__VA_ARGS__)
#define info(msg, ...) printf("(+) " msg "\n", ##__VA_ARGS__)
#define error(msg, ...) printf("(!) " msg "\n", ##__VA_ARGS__)


/*====STRUCTS=====*/
typedef struct _PS_ATTRIBUTE {
    ULONGLONG Attribute;				
    SIZE_T Size;						
    union {
        ULONG_PTR Value;				
        PVOID ValuePtr;					
    };
    PSIZE_T ReturnLength;				
} PS_ATTRIBUTE, * PPS_ATTRIBUTE;

typedef struct _PS_ATTRIBUTE_LIST {
    SIZE_T TotalLength;					
    PS_ATTRIBUTE Attributes[2];			
} PS_ATTRIBUTE_LIST, * PPS_ATTRIBUTE_LIST;

typedef struct _OBJECT_ATTRIBUTES
{
    ULONG Length;                                                           //0x0
    VOID* RootDirectory;                                                    //0x8
    struct _UNICODE_STRING* ObjectName;                                     //0x10
    ULONG Attributes;                                                       //0x18
    VOID* SecurityDescriptor;                                               //0x20
    VOID* SecurityQualityOfService;                                         //0x28
} OBJECT_ATTRIBUTES, *POBJECT_ATTRIBUTES;

typedef struct _CLIENT_ID
{
     PVOID UniqueProcess;
     PVOID UniqueThread;
} CLIENT_ID, *PCLIENT_ID;

typedef struct _UNICODE_STRING {
    USHORT Length;
    USHORT MaximumLength;
    PWSTR  Buffer;
} UNICODE_STRING, * PUNICODE_STRING;

/*====FUNCTIONS PROTOTYPES=====*/

typedef NTSTATUS(NTAPI* NtOpenProcess)(
  _Out_ PHANDLE             ProcessHandle,  // A pointer to a variable of type HANDLE
  _In_  ACCESS_MASK         AccessMask,    // access rights that the caller has requested to the process object.
  _In_  POBJECT_ATTRIBUTES  ObjectAttributes, // A pointer to an OBJECT_ATTRIBUTES structure
  _In_  PCLIENT_ID          ClientId          // A pointer to a client ID that identifies the thread whose process is to be opened
);

typedef NTSTATUS (NTAPI* NtAllocateVirtualMemory)(
  _In_    HANDLE            ProcessHandle,  // A handle to the process which we want to allocate a buffer in
  _Inout_ PVOID             *BaseAddress,  // A pointer to a variable that will receive the base address of the allocated region of pages
  _In_    ULONG             ZeroBits,      // Only Used When *BaseAddress is NULL
  _Inout_ PULONG            RegionSize,    // Size Of Region To Allocte
  _In_    ULONG             AllocationType,  // A bitmask containing flags that specify the type of allocation to be performed (MEM_COMMIT | MEM_RESERVE)
  _In_    ULONG             Protect          // A bitmask containing page protection flags that specify the protection desired for the committed region of pages
);

typedef NTSTATUS(NTAPI* NtWriteVirtualMemory)( // Very Similar To WINAPI WriteProcessMemory
  _In_      HANDLE          ProcessHandle,  // A handle to the process memory to be modified
  _In_      PVOID           BaseAddress,    // A pointer to the buffer that contains data to be written in the address space
  _In_      PVOID           Buffer,         // Pointer To Buffer Holding The Data We Want To Write
  _In_      ULONG           NumberOfBytesToWrite,  // The number of bytes to be written to the specified process.
  _Out_opt_ PULONG          NumberOfBytesWritten   // Pointer To Buffer We Want the Amount of bytes We Wrote To be saved (NULL TO IGNORE)
);

typedef NTSTATUS(NTAPI* NtCreateThreadEx)(
  _Out_    PHANDLE           ThreadHandle,  // Caller supplied storage for the resulting handle.
  _In_     ACCESS_MASK        DesiredAccess, // Specifies the allowed or desired access to the thread. (THREAD_ALL_ACCESS)
  _In_opt_ POBJECT_ATTRIBUTES ObjectAttributes, // Pointer To Initialized attributes for the object.
  _In_     HANDLE     ProcessHandle, // Handle To The Process We Want To Create a hread In
  _In_     PVOID      StartRoutine, // PUSER_THREAD_START_ROUTINE
  _In_opt_ PVOID      Argument,
  _In_     ULONG      CreateFlags, // THREAD_CREATE_FLAGS_*
  _In_     SIZE_T     ZeroBits,
  _In_     SIZE_T     StackSize,
  _In_     SIZE_T     MaximumStackSize,
  _In_opt_ PPS_ATTRIBUTE_LIST AttributeList
);

typedef NTSTATUS(NTAPI* NtProtectVirtualMemory)(
  _In_    HANDLE         ProcessHandle,
  _Inout_ PVOID          *BaseAddress,
  _Inout_ PULONG         NumberOfBytesToProtect,
  _In_    ULONG          NewAccessProtection,
  _Out_   PULONG         OldAccessProtection
);

typedef NTSTATUS(NTAPI* NtWaitForSingleObject)(
  _In_ HANDLE         Handle,
  _In_ BOOLEAN        Alertable,
  _In_ PLARGE_INTEGER Timeout
);

typedef NTSTATUS (NTAPI* NtClose)(
  _In_ HANDLE Handle  // HANDLE to Process Which We Want To Close
);

//=====FUNCTIONS=====//
BOOL StatusCheck(NTSTATUS hName) { // Function To Check If Nt* Was Succesfull
  return (hName != STATUS_SUCCESS) ? FALSE : TRUE; // 1 Liner If Else Statement, Return FALSE if True, else Return TRUE if False
}

HMODULE GetMod(LPCWSTR  ModName) { // Function To Get Handle To Module
  HMODULE hMod = NULL;
  hMod = GetModuleHandleW(ModName);
  return (hMod == NULL) ? NULL : hMod; 
}