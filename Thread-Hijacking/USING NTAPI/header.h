#pragma once
#include <Windows.h>
#include <stdio.h>

#pragma comment(lib, "NTDLL")

#define STATUS_SUCCESS ((NTSTATUS)0x00000000L)




typedef NTSTATUS(NTAPI* p_NtAllocateVirtualMemory)(
    _In_ HANDLE ProcessHandle,
    _Inout_ _At_(*BaseAddress, _Readable_bytes_(*RegionSize) _Writable_bytes_(*RegionSize) _Post_readable_byte_size_(*RegionSize)) PVOID* BaseAddress,
    _In_ ULONG_PTR ZeroBits,
    _Inout_ PSIZE_T RegionSize,
    _In_ ULONG AllocationType,
    _In_ ULONG Protect
);

typedef NTSTATUS(NTAPI* p_NtWriteVirtualMemory)(
    _In_ HANDLE ProcessHandle,
    _In_opt_ PVOID BaseAddress,
    _In_reads_bytes_(BufferSize) PVOID Buffer,
    _In_ SIZE_T BufferSize,
    _Out_opt_ PSIZE_T NumberOfBytesWritten
    );

typedef NTSTATUS(NTAPI* p_NtProtectVirtualMemory)(
    IN HANDLE               ProcessHandle,
    IN OUT PVOID* BaseAddress,
    IN OUT PULONG           NumberOfBytesToProtect,
    IN ULONG                NewAccessProtection,
    OUT PULONG              OldAccessProtection
);
/*=======================================*/

typedef NTSTATUS (NTAPI* p_NtGetContextThread)(
    IN HANDLE               ThreadHandle,
    OUT PCONTEXT            pContext
);

typedef NTSTATUS(NTAPI* p_NtSetContextThread)(
    IN HANDLE               ThreadHandle,
    IN PCONTEXT             Context
);